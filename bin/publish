#!/usr/bin/env node
'use strict';

const config = require('../config.json');

const mongoose = require('mongoose');
const Rawjs = require('raw.js');
const reddit = new Rawjs(config.reddit.script.useragent);
const Winston = require('winston');

const logger = new (Winston.Logger)({
  transports: [
    new (Winston.transports.File)({
      filename: 'scheduler.log',
    }),
  ],
});

const db = mongoose.connect('mongodb://localhost/PostScheduler');

const Post = require('../models/post.js');

reddit.setupOAuth2(
  config.reddit.script.key,
  config.reddit.script.secret
);

const now = new Date;
now.setMinutes(now.getMinutes() + 5);

function quit() {
  reddit.logout();
  db.disconnect();
}

function updatePost(post) {
  if (post.repeats && post.interval === 0) {
    post.remove((err) => {
      if (err) logger.log('error', 'Unable to remove post %s (err: %s)', post.title, err);
    });
  } else {
    const time = new Date(post.time);
    post.time = time.setSeconds(time.getSeconds() + post.interval);

    post.save((err) => {
      if (err) logger.log('error', 'Unable to update post %s (err: %s)', post.title, err);
    });
  }
}

function handlePost(posts) {
  const post = posts.pop();

  reddit.submit({ title: post.title, text: post.body, r: post.subreddit }, (err) => {
    if (err) {
      logger.log('error', 'Unable to submit post %s to reddit (err: %s)', post.title, err);
    } else {
      logger.log('info', 'Successfully posted %s to /r/%s', post.title, post.subreddit);
      updatePost(post);
    }
  });

  setTimeout(() => {
    if (posts.length === 0) {
      quit();
    } else {
      handlePost(posts);
    }
  }, 3000);
}

reddit.auth({
  username: config.reddit.script.username,
  password: config.reddit.script.password,
}, (err) => {
  if (err) {
    logger.log('error', 'Unable to authenticate to Reddit: %s', err);
    quit();
  } else {
    Post.find({ time: { $lt: now } }, (findErr, posts) => {
      if (findErr) logger.log('error', 'Unable to find posts: %s', findErr);

      if (posts.length === 0) {
        quit();
      } else {
        handlePost(posts);
      }
    });
  }
});
